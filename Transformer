

Transformation:
--------------------#01: SETUP:--------------------

composer require spatie/laravel-fractal
php artisan vendor:publish --provider="Spatie\Fractal\FractalServiceProvider"
php artisan 
and check make:transformer wheather is created.

--------------------#02 CREATE--------------------------

Create a transformer(below command create app\Transformers\UserTransformer.php): 
php artisan make:transformer UserTransformer

---------------------#03 GO TO: App\Transformer\UserTransformer.php and CODE Like these:-----------------------

use App\Models\User;
   //To show data
    public function transform(User $user)
    {
        return [
            'identifier' => (int)$user->id,
            'name' => (string)$user->name,
            'email' => (string)$user->email,
            'isVerified' => (int)$user->verified,
            'isAdmin' => ($user->admin === 'true'),
            'creationDate' => (string)$user->created_at,
            'lastChange' => (string)$user->updated_at,
            'deletedDate' => isset($user->deleted_at) ? (string) $user->deleted_at : null,

            'links' => [
                [
                    'rel' => 'self',
                    'href' => route('users.show', $user->id),
                ],
            ]
        ];
    }
//To Insert data
    public static function originalAttribute($index)
    {
        $attributes = [
            'identifier' => 'id',
            'name' => 'name',
            'email' => 'email',
            'isVerified' => 'verified',
            'isAdmin' => 'admin',
            'creationDate' => 'created_at',
            'lastChange' => 'updated_at',
            'deletedDate' => 'deleted_at',
        ];

        return isset($attributes[$index]) ? $attributes[$index] : null;
    }

	 //To validate data
    public static function transformedAttribute($index)
    {
        $attributes = [
            'id' => 'identifier',
            'name' => 'name',
            'email' => 'email',
            'verified' => 'isVerified',
            'admin' => 'isAdmin',
            'created_at' => 'creationDate',
            'updated_at' => 'lastChange',
            'deleted_at' => 'deletedDate',
        ];

        return isset($attributes[$index]) ? $attributes[$index] : null;
    }

-----------#04 (LINK transformar to specific MODEL, User Model for example:)------------------------ 

use App\Transformers\UserTransformer;  
public $transformer = UserTransformer::class;


=============================#05 Add below constructor to choosing the crud operation for UserController.php as example================

Note: add black construct() to apiController.php:   public function __construct() {  }

use App\Transformers\UserTransformer;
public function __construct(){
        parent::__construct();
       $this->middleware('transform.input:' . UserTransformer::class)->only(['store','update']);
    }

-----------#06 SHOW TRANSFORM DATA (Add to Below Codes to App\Traits\ApiResponser.php)----------------

	protected function showAll(Collection $collection, $code = 200){
		if ($collection->isEmpty()) {
			return $this->successResponse(['data' => $collection], $code);
		}

		$transformer = $collection->first()->transformer;
		$collection = $this->transformData($collection, $transformer);		

		return $this->successResponse($collection, $code);
        // return $this->successResponse(['data'=>$collection], $code);
   	 }
    	protected function showOne(Model $instance, $code= 200){
        	$transformer= $instance->transformer;
        	$instance = $this->transformData($instance, $transformer);	
        	return $this->successResponse($instance, $code);
    	}


	protected function transformData($data, $transformer){
		$transformation = fractal($data, new $transformer);
		return $transformation->toArray();
	}
   
==========================#07 To Insert FORM DATA AND VALIDATION(Create Below Middleware)=========================
CREATE: php artisan make:middleware TransformInput
REGISTER IT TO kernel.php: 
protected $middlewareAliases = [
	'transform.input' => \App\Http\Middleware\TransformInput::class,
	]
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Validation\ValidationException;

class TransformInput
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next, $transformer)
    {
        $transformedInput = [];
        $allFields = $request->all();
        $queryParams = $request->query();
        $transformableFields = array_diff($allFields, $queryParams);
        foreach ($transformableFields as $input => $value) {
            $transformedInput[$transformer::originalAttribute($input)] = $value;
        }
        $request->replace($transformedInput);
        $response = $next($request);
        if (isset($response->exception) && $response->exception instanceof ValidationException) {
            $data = $response->getData();
            $transformedErrors = [];
            foreach ($data->error as $field => $error) {
                $transformedField = $transformer::transformedAttribute($field);
                $transformedErrors[$transformedField] = str_replace($field, $transformedField, $error);
            }
            $data->error = $transformedErrors;
            $response->setData($data);
        }
        return $response;
    }
}

