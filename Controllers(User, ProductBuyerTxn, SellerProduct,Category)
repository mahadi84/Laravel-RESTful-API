

========================== UserController ===================================

class UserController extends ApiController{

    public function index(){
        $this->allowedAdminAction();
        // if (request()->user()->tokenCan('read-general') || request()->user()->tokenCan('manage-products')) {
        // if (request()->user()->tokenCan()){
        //      return $this->showOne(request()->user());
        // }
        $users= User::all();
        return $this->showAll($users);
    }

   
    public function show(User $user){
        // $user= User::findOrFail($id);
        return $this->showOne($user);
    }


    
    public function store(Request $request){
        // dd($request->all());
        $request->validate([
                        'name'=>['required'],
                        'email'=>['required','email', 'unique:users'],
                        'password'=>['required', 'min:6']                        
                        // 'password'=>['required', 'min:6', 'confirmed']                        
        ]);

        $data= $request->all();
        $data['admin']= User::REGULAR_USER;
        $data['verified']= User::UNVERIFIED_USER;
        $data['verification_token']= User::generateVerificationCode();

        // dd($data['verification_token']);
        $user=User::create($data);

        // return $this->showOne($user);
        return $this->showMessage('An email sent to '.$user->email.' for verificaiton');

    }

    public function update(Request $request, User $user){
        // $user= User::findOrFail($id);
        $request->validate([
            'email'  => ['max:30','confirmed','email','unique:users,email,'.$user->id],
            'admin'  => ['in:'.User::ADMIN_USER. ',' .User::REGULAR_USER],
        ]);

        if (!empty($request->name)) {
            $user->name = $request->name;
        }
        if($request->has('email') && $user->email != $request->email){
            $user->verified           = User::UNVERIFIED_USER;
            $user->email_verified_at  = null;
            $user->verification_token = User::generateVerificationCode();
            $user->email              = $request->email;
        }
        if (!empty($request->password)) {
            $user->password = $request->password;
        }

        if(!$user->isDirty()){
            return $this->errorResponse('You have changed nothing', 422);
        }
        $user->save();
        return $this->showOne($user);
    }

    public function destroy(User $user){
        $user->delete();
        return $this->showOne($user);
    }

    public function verifyUser(string $token){
        $user=User::where('verification_token', $token)->firstOrFail();
        $user->verified = User::VERIFIED_USER;
        $user->verification_token = null;
        $user->save();

    return $this->successResponse('User verified successfuly', 422);
    }
        
    public function resendVerifyToken(User $user){

        if ($user->isVerified()) {
            return $this->successResponse('User already verified', 422);  
        }
        retry(5, function() use ($user){
            Mail::to($user->email)->send(new UserCreated($user));
           } , 100); 
        return $this->showMessage('An email sent to '.$user->email.' for verificaiton');
    }
    
    public function me(Request $request){
        $user= $request->user();
        return $this->showOne($user);
    }


}

==================== ProductBuyerTransactionController ==========================

class ProductBuyerTransactionController extends ApiController{
    
    public function store(Request $request, Product $product, User $buyer){
        $request->validate([
            'quantity' => ['required','integer','min:1'],
        ]);

        if ($buyer->id == $product->seller_id) {
            return $this->errorResponse('The buyer must be different from the seller', 409);
        }

        if (!$buyer->isVerified()) {
            return $this->errorResponse('The buyer must be a verified user', 409);
        }

        if (!$product->seller->isVerified()) {
            return $this->errorResponse('The seller must be a verified user', 409);
        }

        if (!$product->isAvailable()) {
            return $this->errorResponse('The product is not available', 409);
        }

        if ($product->quantity < $request->quantity) {
            return $this->errorResponse('The product does not have enough units for this transaction', 409);
        }

        return DB::transaction(function () use ($request, $product, $buyer) {
            $product->quantity -= $request->quantity;
            $product->save();

            $transaction = Transaction::create([
                'quantity' => $request->quantity,
                'buyer_id' => $buyer->id,
                'product_id' => $product->id,
            ]);

            return $this->showOne($transaction, 201);
        });
    }



========================== SellerProductController  ==========================

class SellerProductController extends ApiController{
   
   public function index(Seller $seller){
      // if (request()->user()->tokenCan('read-general') || request()->user()->tokenCan('manage-productss')) {
         $products = $seller->products;
         return $this->showAll($products);
   //   }
   //   throw new AuthorizationException('Invalid scope(s)');

   }

   public function store(Request $request, Product $product, Seller $seller){
   //    if (!request()->user()->tokenCan('manage-products')) {
   //         throw new AuthorizationException('Invalid scope(s)');
   //   }

      $request->validate([
            'name' =>['required', 'string', 'max:2'],
            'description' =>['required','string', 'max:2'],
            'quantity' =>['required','integer'],
            'image' =>['required', 'image', 'mimes:jpeg,png,jpg', 'max:1024'],
      ]);

      $data= $request->all();
      
      $data['status']= Product::UNAVAILABLE_PRODUCT;
      $data['seller_id']= $seller->id;
      $data['image']= $this->uploadImage($request, 'picture', '350,200', 'product_images');

      $product= Product::create($data);
      return $this->showOne($product);
     }

     public function update(Request $request, Seller $seller, Product $product){        
      $request->validate([
            'name' =>['string','min:2'],
            'description' =>['string','max:500'],
            'quantity' =>['integer'],
            'status' => ['in:'. Product::UNAVAILABLE_PRODUCT.','.Product::AVAILABLE_PRODUCT],
            'image' =>['image','mimes:jpeg,png,jpg', 'max:1024'],
      ]);

      $this->checkSeller($seller, $product);

      // if(!empty($request->name)){
      //    $product->name= $request->name;
      // }
      // if(!empty($request->description)){
      //    $product->description= $request->description;
      // }
      // if(!empty($request->quantity)){
      //    $product->quantity= $request->quantity;
      // }

      $product->fill($request->only([
         'name','description', 'quantity'
      ]));

      if(!empty($request->status)){
         $product->status= $request->status;

         if($product->isAvailable() && $product->categories()->count() == 0){
            return $this->errorResponse('An active product must have at least one category', 409);
         }
      }
      if($request->has('image')){
         $product->image= $this->updateImage($request, 'image', '350,200', 'product_images', $product->image);
      }

      if (!$product->isDirty()) {
            return $this->errorResponse('Nothing to change', 211);
      }
      $product->save();
      return $this->showOne($product);
     }


     public function destroy(Seller $seller, Product $product){
         $this->checkSeller($seller, $product);
         
         $this->deleteImage('product_images',$product->image);
         $product->delete();
         return $this->showOne($product);
     }

     private function checkSeller(Seller $seller, Product $product){
         if($seller->id != $product->seller_id ){
            throw new HttpException(422, 'The specified seller is not the actual seller of the product');   
         }
     }
}

======================= Category ===========================

class CategoryController extends ApiController{
      
    public function index(){
       $categories= Category::all();       
       return $this->showAll($categories);
    }

    public function store(Request $request){        
        $request->validate([
            'name'=>['required'],
            'description'=>['required','max:1000'],
        ]);
        $category=Category::create($request->all());
        return $this->showOne($category, 201);
    }

    public function show(string $id){
        $categories= Category::findOrFail($id);
        return $this->showOne($categories);
    }

    public function update(Request $request, string $id)    {
        $category= Category::findOrFail($id);
        $category->fill($request->only([
            'name',
            'description' 
        ]));
        if (!$category->isDirty()) {
            return $this->errorResponse('You have changed nothing', 422);
        }
        
        $category->save();
        return $this->showOne($category);
    }

    public function destroy(string $id){
        $category= Category::findOrFail($id);
        $category->delete();
        return $this->showOne($category);
    }
}
============================== ProductCategoriesController ============================

class ProductCategoriesController extends ApiController
{
    // Display a listing of the resource.
    public function index(Product $product){
       $categories= $product->categories;
       return $this->showAll($categories);
    }

    // Update the specified resource in storage.
    public function update(Product $product, Category $category){
        // attach, syns, synscwithoutDetaching
        $product->categories()->syncwithoutDetaching([$category->id]);
        return $this->showAll($product->categories);         
    }

    // Remove the specified resource from storage.
    public function destroy(Product $product, Category $category){
        if($product->categories($category->id)){
            $product->categories()->detach($category->id);
        }
        return $this->showAll($product->categories); 
     }
}


